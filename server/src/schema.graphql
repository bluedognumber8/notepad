scalar DateTime
type Query {
  notes: [Note!]!
  note(id: ID!): Note!
  # Добавляем к существующим запросам noteFeed
  noteFeed(cursor: String): NoteFeed
  user(username: String!): User
  users: [User!]!
  me: User!
}

type Note {
  id: ID!
  content: String!
  author: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  favoriteCount: Int!
  favoritedBy: [User!]
}

type User {
  id: ID!
  username: String!
  email: String!
  avatar: String
  notes: [Note!]!
  favorites: [Note!]!
}

type Mutation {
  newNote(content: String!): Note!
  updateNote(id: ID!, content: String!): Note!
  deleteNote(id: ID!): Boolean!
  signUp(username: String!, email: String!, password: String!): String!
  signIn(username: String, email: String, password: String!): String!
  toggleFavorite(id: ID!): Note!
}

type NoteFeed {
  notes: [Note]!
  cursor: String!
  hasNextPage: Boolean!
}

type Track {
  id: ID!
  "The track's title"
  title: String!
  "The track's main Author"
  author: Author!
  "The track's illustration to display in track card or track page detail"
  thumbnail: String
  "The track's approximate length to complete, in minutes"
  length: Int
  "The number of modules this track contains"
  modulesCount: Int
  authorId: String
}

"Author of a complete Track or a Module"
type Author {
  id: ID!
  "Author's first and last name"
  name: String!
  "Author's profile picture"
  photo: String
}
